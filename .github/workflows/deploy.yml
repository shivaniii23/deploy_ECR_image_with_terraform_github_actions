name: CICD with terraform
on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  PVT_SSH_KEY: ${{ secrets.PVT_SSH_KEY }}
  PUBLIC_SSH_KEY: ${{ secrets.PUBLIC_SSH_KEY }}
  AWS_REGION: us-east-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-output.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform-wrapper: false
      - name: terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: terraform plan
        id: plan
        run: |-
          terraform plan -destroy \
          -var="region=us-east-1" \
          -var="public_key=$PUBLIC_ACCESS_KEY" \
          -var="private_key=$PVT_ACCESS_KEY" \
          -var="key_name=kp" \
          -out=PLAN
        working-directory: ./terraform
      - name: terraform apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: terraform output
        id: set-output
        run: |-
        echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: set ip env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run : |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . 
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: deploy docker image on ec2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PVT_SSH_KEY }}
          envs: PVT_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_DEFAULT_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |-
            sudo apt update \
            sudo apt install docker.io -y \
            sudo apt install awscli -y \
            sudo $(aws ecr get-login --no-include-email --region us-east-1) \
            sudo docker stop myapp || true \
            sudo docker rm myapp || true \
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            sudo docker run -d --name myapp -p 80:8081 $REGISTRY/$REPOSITORY:$IMAGE_TAG

